\functions {
    R dt;
    R tMax;
    R DesiredRelativeSlip;
    R Pbmax;
    R Kf;
    R I;
    R v0;
    R Rr;
    R m;
    R g;
    R Ctrl;
    R eps;
    R TB;
    R k;
}

\predicates {

}

\programVariables {
    /* state variable declarations */
    R int1_x;
    R int2_x;
    R int1_y;
    R int2_y;
    R int3_x;
    R int3_y;
    R int4_x;
    R int4_y;
    R ws; //wheel speed
    R vsAng;
    R y;
    R yOld;
    R u;
    R t;
    R save;
    R y1;
    R y2;
    R y3;
    R btPart;
    R part1;
    R part2;
    R part3;
    

}

\problem {
 /*(\forall R y; huy(y) = y + 1) ->  (huy(x) =x + 1) &*/
      /* initial state characterization */
       t = 0 & tMax = 17 & dt = 0.1 & DesiredRelativeSlip = 0.2 & Pbmax = 1500 & 
       Kf = 1.0 & I = 5 & v0 = 88 & Rr = 1.2500 & m = 50 & g = 32.180 &Ctrl = 1.0 & eps = 0.001 & TB = 0.01 & k = 100
       &  y = 0 &yOld = 0 & btPart = 0
  ->
     \[                    /* system dynamics */
          
     (while(t < tMax)
        
        
        yOld := y;
    
        y := DesiredRelativeSlip - yOld;
      
        /*Bang-bang controller*/
	
	if (y > 0) then 
	    y := 1
	else
	    y := -1
	fi;
	     
        /*Hydraulic Lag */
        
        u := y;
        
        {y' = (k * u - y) / TB};
        
        /*y:=y * 50*/;
        
        /*Brake pressure*/
        save := y;
	y := int1_y + (y + int1_x) * dt / 2;
        if (y < 0) then
	    y := 0
	fi;
	if (y > Pbmax) then
    	    y := Pbmax
    	fi;
	int1_y := y;
	int1_x := save;
        
        
         /*Force & torque*/
	y := y * Kf;
    
	/*Tire torque*/
	/*part1 := lookUp(yOld);*/
	
	if (yOld <= 0) then
    	    part1 := 0 
    	fi;
	if (yOld <= 0.05) then
    	    part1 := 0.4 
    	fi;
	if (yOld <= 0.1) then
    	    part1 := 0.8
    	fi;
	if (yOld <= 0.15) then
    	    part1 := 0.97 
    	fi;
	if (yOld <= 0.2) then
    	    part1 := 1.0 
    	fi;
	if (yOld <= 0.25) then
    	    part1 := 0.98 
    	fi;
	if (yOld <= 0.3) then
    	    part1 := 0.96 
    	fi;
	if (yOld <= 0.35) then
    	    part1 := 0.94 
    	fi;
	if (yOld <= 0.4) then
    	    part1 := 0.92
    	fi;
	if (yOld <= 0.45) then
    	    part1 := 0.90 
    	fi;
	if (yOld <= 0.50) then
    	    part1 := 0.88 
    	fi;
	if (yOld <= 0.55) then
    	    part1 := 0.855 
    	fi;
	if (yOld <= 0.60) then
    	    part1 := 0.83 
    	fi;
	if (yOld <= 0.65) then
    	    part1 := 0.81 
    	fi;
	if (yOld <= 0.70) then
    	    part1 := 0.79 
    	fi;
	if (yOld <= 0.75) then
    	    part1 := 0.77 
    	fi;
	if (yOld <= 0.80) then
    	    part1 := 0.75 
    	fi;
	if (yOld <= 0.85) then
    	    part1 := 0.73 
    	fi;
	if (yOld <= 0.90) then
    	    part1 := 0.72 
    	fi;
	if (yOld <= 0.95) then
    	    part1 := 0.71 
    	fi;
	if (yOld >= 1.0) then
    	    part1 := 0.7 
    	fi;
        
	
	
	
	part1 := part1 * m * g / 4;
    
    
	/*Brake torque*/
	y := -y;
	y := y + part1 * Rr;
    
	y := y * 1.0 / I;
        
        save := y;
        y :=  int2_y + (y + int2_x) * dt / 2;
    
	if (y < 0) then 
	    y := 0
	fi;
	if (y > 1000) then
	    y := 1000
	fi;
	
	int2_x := save;
	int2_y := y;
    
	ws := y;
    
	y1 := y;
    
	part2 := part1 * (-1) / m;
    
        save := part2;
	part2 := int3_y + (part2 + int3_x) * dt / 2 ;
    
	int3_x := save;
    
	if (part2 < 0) then
	    part2 := 0
	fi;
	if (part2 > 1000) then
	    part2 := 1000
	fi;
	
	int3_y := part2;
    
	part2 := part2 * 1 / Rr;
    
	vsAng := part2;
    
	y2 := part2;
    
	part3 := part2;
    
	part3 := part3 * dt;
    
	y3 := part3;
    
	u := 0;
	if (y2 = 0) then
	    u := 1
	fi;
    
	y := 1.0 - y1 / (y2 + u * eps); 
     
        t := t + dt
     end)@invariant(t>=0 & t<=tMax) /*end of while*/
     \] (t >= tMax) & (y <= 1)   /* safety / postcondition */
}
